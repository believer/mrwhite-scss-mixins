@charset "UTF-8";

@import "reset";

/* ---------------------------------------------------- */
/* Responsive mixins */
$mobile-portrait: 480px;
$mobile-landscape: 768px;
$tablet-landscape: 959px;

@mixin mobile () {
  @media only screen and (max-width: $mobile-portrait) {
    @content;
  }
}

@mixin mobile-landscape () {
  @media only screen and (min-width: $mobile-portrait) and (max-width: $mobile-landscape) {
    @content;
  }
}

@mixin tablet () {
  @media only screen and (min-width: $mobile-landscape) and (max-width: $tablet-landscape) {
    @content;
  }
}

/* Shapes and sizing
--------------------------------------------------------*/
@mixin size($width, $height:$width) {
  height:$height;
  width:$width;
}

@mixin circle($size) {
  @include size($size);
  @include border-radius($size);
}

@mixin oval($size) {
  $half: $size / 2;
  @include size($size, $half);
  $radius:$size / $half + "px";
  @include border-radius($radius);
}

@mixin square($size) {
  @include size($size);
}

@mixin triangle-base() {
  @include size(0);

  content:"";
  display: inline-block;
}

@mixin triangle($direction, $size, $color) {
  @include triangle-base();

  @if $direction == 'up' or $direction == 'down' {
    $dir: if($direction == 'up', 'bottom', 'top');
    
    border-right: $size solid transparent;
    border-#{$dir}: $size solid $color;
    border-left: $size solid transparent;

  } @else if $direction == 'left' or $direction == 'right' {
    $dir: if($direction == 'left', 'right', 'left');
    
    border-top:Â $size solid transparent;
    border-bottom: $size solid transparent;
    border-#{$dir}: $size solid $color;
  }
}

@mixin triangle-corner($direction1, $direction2, $size, $color) {
  @include triangle-base();

  $dir: if($direction2 == 'right', 'left', 'right');

  border-#{$direction1}: $size solid $color;
  border-#{$dir}: $size solid transparent;
}

/* Helper functions
--------------------------------------------------------*/
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

/* Mixins
--------------------------------------------------------*/

/**
 * Animations
 */
@mixin animation($name, $duration: 300ms, $easing: ease, $repeat: 1) {
  @include prefix(animation, $name $duration $easing $repeat);
}

/**
 * Apperance
 */
@mixin appearance($property:none) {
  @include prefix(appearance, $property);
}

/**
 * Border radius
 */
@mixin border-radius($radius:3px) {
  @include prefix(border-radius, $radius);
}

/**
 * Box shadow
 */
@mixin box-shadow($shadow) {
  @include prefix(box-shadow, $shadow);
}

/**
 * Box sizing
 */
@mixin box-sizing($type:border-box) {
  @include prefix(box-sizing, $type); 

  // keeps background from busting out of border 
  -webkit-background-clip: padding-box;
     -moz-background-clip: padding;
          background-clip: padding-box;
}

/**
 * Centering
 */
@mixin centered($x,$y:$x) {
  @include prefix(transform, translateX(#{$x}) translateY(#{$y}) );
}

@mixin center($coord, $direction:"", $pos:0) {
  @if $coord == 'x' {
    @if $direction == '' {
      $direction: top;
    }

    @include centered(-50%,0);
    @include position($direction, left, $pos, 50%);
  } @else if $coord == 'y' {
    @if $direction == '' {
      $direction: left;
    }

    @include centered(0,-50%);
    @include position(top, $direction, 50%, $pos);
  } @else if $coord == 'both' {
    @include centered(-50%);
    @include position(top, left, 50%, 50%);
  }
}

/**
 * Columns
 */
@mixin columns($columns:2, $gap: 20px) {
  @include prefix(column-count, $columns);
  @include prefix(column-gap, $gap);
}

/**
 * Font size
 */
@function calculateRem($size) {
  $rem: $size / 16px;
  @return $rem * 1rem;  
}

@mixin font($size, $style:normal) {
  font-size: $size;
  font-size: calculateRem($size);
  font-style: $style;
}

/**
 * Inner shadow
 */
@mixin inner-shadow($shadow: 1px 1px 0px rgba(0,0,0,1)) {
  @include prefix(box-shadow, inset #{$shadow});
}

/**
 * Keyframes
 */
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
     @-moz-keyframes #{$name} { @content; }
          @keyframes #{$name} { @content; }
}

/**
 * Opacity
 */
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); // IE8
}

/**
 * Positioning
 */
@mixin positioned($d1, $d2, $p1, $p2, $p) {
  #{$d1}:#{$p1};
  #{$d2}:#{$p2};
  position:$p;
}

@mixin position($d1, $d2, $p1:0, $p2:0, $p:absolute, $full:false) {
  @include positioned($d1,$d2,$p1,$p2,$p);
  
  @if $full == true {
    @include size(100%);    
  }
}

/**
 * Prefixes
 * @type {[type]}
 */
$prefixes: webkit moz ms o;

@mixin prefix($property, $value) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: #{$value};
  }
  #{$property}: #{$value};
}

/**
 * Rotate
 */
@mixin rotate($angle) {
  @include transform(rotate($angle));
}

/**
 * Scale
 */
@mixin scale($ratio) {
  @include transform(scale($ratio));
}

/**
 * Text overflow
 */
@mixin text-overflow() {
  overflow:hidden;
  text-overflow:ellipsis;
  white-space:nowrap;
}

/**
 * Transform
 */
@mixin transform($transform) {
  @include prefix(transform, #{$transform});
}

/**
 * Translate X and Y
 */
@mixin translateXY($x, $y) {
  @include transform(translateX($x) translateY($y));
}

/**
 * Transition
 */
@mixin transition($type, $time: 300ms, $animation: ease) {
  @include prefix(transition, $type $time $animation);
}

/**
 * User select
 */
@mixin user-select($type:none) {
  @include prefix(user-select, $type);
}