@charset "UTF-8";

@import "helpers/all";
@import "css3/all";
@import "typography/all";

//
// Shapes and sizing
// --------------------------------------------------
@mixin size($width, $height:$width, $type: 'normal') {
  @if str-index($type, 'normal') {
    height: $height;
    width: $width;
  }

  @if str-index($type, 'min') {
    min-height: $height;
    min-width: $width;
  }

  @if str-index($type, 'max') {
    max-height: $height;
    max-width: $width;
  }
}

//
// Mixins
// --------------------------------------------------

// Animations
@mixin animation($name, $duration: 300ms, $easing: ease, $repeat: 1) {
  @include prefix(animation, $name $duration $easing $repeat);
}

// Appearance
@mixin appearance($property:none) {
  @include prefix(appearance, $property);
}

// Border radius
@mixin border-radius($radius:3px) {
  @include prefix(border-radius, $radius);
}

// Box shadow
@mixin box-shadow($shadow) {
  @include prefix(box-shadow, $shadow);
}

// Centering
@mixin centered($x,$y:$x) {
  @include prefix(transform, translateX(#{$x}) translateY(#{$y}) );
}

@mixin center($coord, $direction:"", $pos:0) {
  @if $coord == 'x' {
    @if $direction == '' {
      $direction: top;
    }

    @include centered(-50%,0);
    @include position($direction, left, $pos, 50%);
  } @else if $coord == 'y' {
    @if $direction == '' {
      $direction: left;
    }

    @include centered(0,-50%);
    @include position(top, $direction, 50%, $pos);
  } @else if $coord == 'both' {
    @include centered(-50%);
    @include position(top, left, 50%, 50%);
  }
}

// Columns
@mixin columns($columns:2, $gap: 20px) {
  @include prefix(column-count, $columns);
  @include prefix(column-gap, $gap);
}

// Font size
@function calculateRem($size) {
  $rem: $size / 16px;
  @return $rem * 1rem;  
}

@mixin font($size, $style:normal) {
  font-size: $size;
  font-size: calculateRem($size);
  font-style: $style;
}

// Inner shadow
@mixin inner-shadow($shadow: 1px 1px 0px rgba(0,0,0,1)) {
  @include prefix(box-shadow, inset #{$shadow});
}

// Keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
     @-moz-keyframes #{$name} { @content; }
          @keyframes #{$name} { @content; }
}

// Positioning
@mixin positioned($d1, $d2, $p1, $p2, $p) {
  #{$d1}:#{$p1};
  #{$d2}:#{$p2};
  position:$p;
}

@mixin position($d1, $d2, $p1:0, $p2:0, $p:absolute, $full:false) {
  @include positioned($d1,$d2,$p1,$p2,$p);
  
  @if $full == true {
    @include size(100%);    
  }
}

// Prefixes
$prefixes: webkit moz ms o;

@mixin prefix($property, $value) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: #{$value};
  }
  #{$property}: #{$value};
}

// Rotate
@mixin rotate($angle) {
  @include transform(rotate($angle));
}

// Scale
@mixin scale($ratio) {
  @include transform(scale($ratio));
}

// Text overflow
@mixin text-overflow() {
  overflow:hidden;
  text-overflow:ellipsis;
  white-space:nowrap;
}

// Transform
@mixin transform($transform) {
  @include prefix(transform, #{$transform});
}

// Translate X and Y
@mixin translateXY($x, $y) {
  @include transform(translateX($x) translateY($y));
}

// Transition
@mixin transition($type, $time: 300ms, $animation: ease) {
  @include prefix(transition, $type $time $animation);
}

// User select
@mixin user-select($type:none) {
  @include prefix(user-select, $type);
}

//Gradients
@mixin gradient($topColor, $bottomColor, $fallback) {
  background: $fallback;
  background: -moz-linear-gradient(top,  $topColor 0%, $bottomColor 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$topColor), color-stop(100%,$bottomColor));
  background: -webkit-linear-gradient(top,  $topColor 0%,$bottomColor 100%);
  background: -o-linear-gradient(top,  $topColor 0%,$bottomColor 100%);
  background: -ms-linear-gradient(top,  $topColor 0%,$bottomColor 100%);
  background: linear-gradient(to bottom,  $topColor 0%,$bottomColor 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$topColor', endColorstr='$bottomColor',GradientType=0 );
}